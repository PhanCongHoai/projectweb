const Product = require("../models/product");

// ‚úÖ Th√™m function ƒë·ªÉ l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
exports.getAllProducts = async (req, res) => {
  try {
    const products = await Product.findAll({
      order: [['id', 'DESC']] // S·∫Øp x·∫øp theo ID gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
    });

    res.json({
      code: 200,
      message: "L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m th√†nh c√¥ng",
      data: products,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m:", error);
    res.status(500).json({
      code: 500,
      message: "L·ªói server",
    });
  }
};

// ‚úÖ Th√™m function ƒë·ªÉ x√≥a s·∫£n ph·∫©m
exports.deleteProduct = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
    const product = await Product.findByPk(id);
    if (!product) {
      return res.status(404).json({
        code: 404,
        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i",
      });
    }

    // X√≥a s·∫£n ph·∫©m
    await Product.destroy({
      where: { id: id }
    });

    res.json({
      code: 200,
      message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng",
    });
  } catch (error) {
    console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
    res.status(500).json({
      code: 500,
      message: "L·ªói server",
    });
  }
};

exports.getProductsByCategory = async (req, res) => {
  const { id } = req.params;
  try {
    const products = await Product.findAll({
      where: { category_id: id },
    });

    res.json({
      code: 200,
      message: "L·∫•y danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c th√†nh c√¥ng",
      data: products,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c:", error);
    res.status(500).json({
      code: 500,
      message: "L·ªói server",
    });
  }
};

exports.getSuggestedProducts = async (req, res) => {
  try {
    const products = await Product.findAll({
      where: { is_suggested: true },
    });

    res.json({
      code: 200,
      message: "L·∫•y s·∫£n ph·∫©m g·ª£i √Ω th√†nh c√¥ng",
      data: products,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m g·ª£i √Ω:", error);
    res.status(500).json({
      code: 500,
      message: "L·ªói server",
    });
  }
};

exports.createProduct = async (req, res) => {
  try {
    const {
      title,
      product_url,
      image_url,
      price,
      discount,
      original_price,
      number,
      number2,
      category_id,
    } = req.body;

    // ‚úÖ Validation: Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!title || !original_price || !category_id) {
      return res.status(400).json({
        code: 400,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: title, original_price, category_id",
      });
    }

    // ‚úÖ Validation: Ki·ªÉm tra s·ªë √¢m
    if (original_price < 0 || discount < 0) {
      return res.status(400).json({
        code: 400,
        message: "Gi√° v√† gi·∫£m gi√° kh√¥ng ƒë∆∞·ª£c √¢m",
      });
    }

    // ‚úÖ Fix: T√≠nh gi√° cu·ªëi c√πng ƒë√∫ng c√°ch
    const discountValue = discount || 0;
    const finalPrice = Math.max(0, original_price - (original_price * discountValue) / 100);

    console.log("üìä D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", {
      title,
      product_url,
      image_url,
      price: finalPrice,
      discount: discountValue,
      original_price,
      number,
      number2,
      category_id,
    });

    const newProduct = await Product.create({
      title,
      product_url: product_url || "",
      image_url: image_url || "",
      price: Math.round(finalPrice), // ‚úÖ L√†m tr√≤n gi√°
      discount: discountValue,
      original_price,
      number: number || 0,
      number2: number2 || 0,
      category_id,
    });

    res.status(201).json({
      code: 201,
      message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng",
      data: newProduct,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:", error);

    // ‚úÖ Tr·∫£ v·ªÅ th√¥ng tin l·ªói chi ti·∫øt h∆°n
    if (error.name === 'SequelizeValidationError') {
      return res.status(400).json({
        code: 400,
        message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        errors: error.errors.map(e => e.message),
      });
    }

    if (error.name === 'SequelizeForeignKeyConstraintError') {
      return res.status(400).json({
        code: 400,
        message: "Category ID kh√¥ng t·ªìn t·∫°i",
      });
    }

    res.status(500).json({
      code: 500,
      message: "L·ªói server khi th√™m s·∫£n ph·∫©m",
      error: process.env.NODE_ENV === 'development' ? error.message : undefined,
    });
  }
};